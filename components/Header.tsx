import s from '../styles/components/header.module.scss'
import Link from "next/link";
import React, {useState, MouseEvent, useEffect, ChangeEvent} from "react";
import {useRouter} from "next/router";
import {onToggleLanguageClick} from "../utils/changeCurrentLanguage";
import {getSearch} from "../store/ActionCreators/Product.ac";
import {useTypedSelector} from "../hooks/useTypedSelector";
import {useAppDispatch} from "../hooks/useTypedDispatch";
import Dropdown from "./Dropdown";
import Auth from "./Auth";
import {$api, API_BASE_URL} from "../http/api";
import ProfileImg from '../public/images/profile_mock.png'
import {useTranslation} from "next-i18next";
import {toggleShowAuth} from "../store/Slices/Profile.slice";
import useOnclickOutside from "react-cool-onclickoutside";
import {setProducts} from "../store/Slices/Product.slice";
import Card from "./Card";
import {IProduct} from "../types/Product.types";
import axios from "axios";
import Modal from "./Modal";

interface IHeaderProps {
}

interface IHeaderStateCollection {
  id: number;
  categories_id: number;
  language_code: string;
  name: string;
  master_id: number;
}

interface IHeaderState {
  id: number;
  name: string;
  collection: IHeaderStateCollection[];
}

const Header: React.FC<IHeaderProps> = ({}) => {
  const dispatch = useAppDispatch()
  const { locale, query } = useRouter()
  const [searchValue, setSearchValue] = useState('')
  const [showSearch, setShowSearch] = useState(false)
  const ref = useOnclickOutside((e: any) => {
    if(e.target.classList && e.target.classList[0] === 'searchbtn'){
      return
    }
    setShowSearch(false)
    dispatch(setProducts(null))
  });
  const router = useRouter()

  const {isLoading, error, products} = useTypedSelector(state => state.product)
  const {isAuth, user} = useTypedSelector(state => state.profile)
  const fav = useTypedSelector(state => state.fav)
  const basket = useTypedSelector(state => state.basket)
  const [headerState, setHeaderState] = useState<IHeaderState[]>([])
  const [catalogState, setCatalogState] = useState<boolean>(false)

  const { t } = useTranslation('common')

  useEffect(()=>{
    $api.get(`${locale}/product/catalog/`)
      .then((res)=>{
        setHeaderState(res.data)
      })
      .catch(()=>{})
  },[locale])

  const handleSearchClick = (e: MouseEvent) => {
    setShowSearch(prev => !prev)
  }

  const handleSearchInput = (e: ChangeEvent<HTMLInputElement> ) => {
    setSearchValue(e.target.value)
  }

  let typingTimer: string | number | NodeJS.Timeout | undefined
  let doneTypingInterval = 1000;

  function doneTyping(){
    const obj = {
      name: searchValue,
      locale: router.locale
    }
    dispatch(getSearch(obj))
  }

  const [popupState, setPopupState] = useState(false);
  const [popupArr, setPopupArr] = useState<IHeaderStateCollection[]>([]);
  const [popupPage, setPopupPage] = useState(0)

  const [basketCount, setBasketCount] = useState(0)

  useEffect(()=>{
    let totalCount = 0
    basket.products.map((el)=>{
      totalCount += el.count
    })
    setBasketCount(totalCount)
  },[basket.products])

  const [width, setWidth] = useState<string>('desktop')

  const resize = (e: any) => {
    if(window){
      if(window.innerWidth > 1050){
        setWidth('desktop')
      }else if(window.innerWidth <= 1050 && window.innerWidth > 700) {
        setWidth('tablet')
      }else if(window.innerWidth <= 700) {
        setWidth('mobile')
      }else{
        setWidth('desktop')
      }
    }
  }

  useEffect(()=>{
    window.addEventListener('resize', resize)
    if(window){
      if(window.innerWidth > 1050){
        setWidth('desktop')
      }else if(window.innerWidth <= 1050 && window.innerWidth > 700) {
        setWidth('tablet')
      }else if(window.innerWidth <= 700) {
        setWidth('mobile')
      }else{
        setWidth('desktop')
      }
    }

    return () => {
      window.removeEventListener('resize', resize)
    }
  }, [])

  const [dayProduct, setDayProduct] = useState<null | IProduct>(null)

  useEffect(()=>{
    $api.get(`${locale}/product/favorite_product/`)
      .then((res)=>{
        setDayProduct(res.data)
      })
  },[])

  return (
    <>
      <Auth />
      <Modal />
      {popupState && <div className={s.header__placeholder}></div>}
      <header className={s.header + ' ' + (popupState && s.header__active)}>
        <div className={s.wrapper}>
          <div className={s.top}>
            {(width !== 'mobile' && width !== 'tablet') && <Link href={'/'}>
              <svg className={s.top__logo} width="176" height="77" viewBox="0 0 176 77" fill="none" xmlns="http://www.w3.org/2000/svg">
                <g clip-path="url(#clip0_69_9)">
                  <path fill-rule="evenodd" clip-rule="evenodd" d="M44.9096 47.594C44.1228 48.9293 43.0566 50.078 41.7845 50.9611C40.2204 52.0251 38.4906 52.8211 36.6659 53.3164C34.311 53.934 31.8832 54.2275 29.4494 54.1887C24.4091 54.1887 20.2132 53.1856 16.7747 51.0833C13.1254 48.8805 10.0024 45.9029 7.62563 42.36H0.0957031C1.81989 44.3779 3.70022 46.2563 5.71921 47.9778C7.60404 49.5888 9.69057 50.9466 11.926 52.0167C14.3814 53.1486 16.979 53.941 19.6474 54.3719C22.8835 54.9886 26.1729 55.2808 29.4668 55.2443C33.0994 55.2976 36.7272 54.9584 40.2872 54.2324C42.8917 53.7454 45.3922 52.8098 47.6779 51.4671C49.4114 50.4471 50.8558 48.9997 51.8737 47.2625C52.7887 45.616 53.2513 43.7557 53.2143 41.8715C53.2575 40.3858 53.005 38.9063 52.4714 37.5194C51.9378 36.1325 51.1339 34.866 50.1066 33.7938C47.7632 31.5273 45.0708 29.654 42.1327 28.2458C38.8088 26.6845 35.3895 25.3355 31.8955 24.207C28.2045 23.1195 24.766 21.9418 21.5799 20.6741C18.7975 19.69 16.1482 18.3626 13.6931 16.7224C11.5865 15.2918 10.4983 13.617 10.4983 11.4885C10.5327 10.0348 11.0333 8.6309 11.926 7.48454C12.9297 6.13564 14.1828 4.99254 15.6169 4.11737C17.3592 3.12963 19.2195 2.36752 21.1534 1.84933C23.2857 1.26167 25.4881 0.968193 27.6996 0.977005C31.3702 0.919755 34.9852 1.87973 38.1458 3.75099C41.2448 5.60032 43.9347 8.62728 46.285 12.8319H53.7976C50.6921 8.70547 46.6321 5.39743 41.9673 3.19271C36.9405 1.00732 31.5071 -0.0810255 26.0282 2.5332e-06C22.9809 -0.00728088 19.941 0.302602 16.9575 0.924665C14.4316 1.49754 12.0012 2.43178 9.74097 3.69865C7.8369 4.73444 6.17734 6.16838 4.87481 7.90325C3.7278 9.52365 3.11869 11.4646 3.13379 13.4512C3.06812 15.4086 3.71821 17.3226 4.96186 18.8335C6.31382 20.4534 7.96636 21.7954 9.82802 22.7851C12.0206 24.0375 14.326 25.0802 16.7138 25.8993C19.2295 26.824 21.8237 27.6439 24.5484 28.5163C27.2731 29.3886 29.8324 30.2609 32.4352 31.203C34.7501 32.05 37.0018 33.0616 39.173 34.23C41.0346 35.2197 42.6872 36.5616 44.0391 38.1816C45.2753 39.6636 45.9313 41.5456 45.8846 43.4766C45.8937 44.9107 45.5499 46.3248 44.8835 47.594M72.1828 35.0674C71.3922 35.093 70.6047 34.9568 69.8684 34.6674C69.132 34.3779 68.4622 33.9412 67.8998 33.3838C66.8116 32.2254 66.21 30.6917 66.2198 29.1007V25.6114H114.472V32.4243C113.676 32.3782 112.88 32.496 112.131 32.7706C111.382 33.0451 110.698 33.4706 110.12 34.0206C109.565 34.5997 109.131 35.2836 108.842 36.0323C108.554 36.7811 108.417 37.5799 108.44 38.3822V49.8707C108.473 50.5346 108.369 51.1982 108.133 51.8198C107.898 52.4413 107.537 53.0073 107.073 53.4822C106.591 53.9623 106.017 54.3403 105.386 54.5935C104.755 54.8468 104.079 54.9702 103.399 54.9564H120.514C119.847 54.9769 119.184 54.8606 118.564 54.6145C117.944 54.3684 117.381 53.9977 116.91 53.5254C116.439 53.053 116.069 52.4889 115.823 51.8679C115.578 51.2469 115.461 50.5821 115.482 49.9144V5.29501C115.46 4.61405 115.575 3.93565 115.821 3.30022C116.066 2.66479 116.436 2.08533 116.91 1.59635C117.386 1.13586 117.952 0.778848 118.572 0.547685C119.192 0.316522 119.853 0.21619 120.514 0.252976H103.399C104.07 0.218886 104.741 0.320234 105.372 0.551004C106.003 0.781775 106.582 1.13726 107.073 1.59635C107.533 2.09075 107.889 2.67316 108.12 3.3087C108.35 3.94424 108.45 4.61983 108.413 5.29501V15.3006C109.209 15.2627 110.004 15.3853 110.752 15.661C111.5 15.9367 112.185 16.3599 112.766 16.9056C113.328 17.4986 113.766 18.1987 114.053 18.9644C114.34 19.7302 114.471 20.5459 114.437 21.3632V24.6431H66.2198V17.996C67.0206 18.0205 67.8183 17.8842 68.5658 17.595C69.3133 17.3059 69.9955 16.8698 70.5723 16.3125C71.1147 15.7447 71.5358 15.072 71.8097 14.3356C72.0836 13.5991 72.2047 12.8143 72.1654 12.0293V5.29501C72.1435 4.61405 72.2586 3.93565 72.5039 3.30022C72.7491 2.66479 73.1195 2.08533 73.593 1.59635C74.0711 1.13364 74.6397 0.775338 75.2631 0.544108C75.8864 0.312878 76.5508 0.213745 77.2143 0.252976H60.0652C60.739 0.216511 61.4132 0.316695 62.0474 0.547527C62.6816 0.778359 63.2628 1.13509 63.7562 1.59635C64.2165 2.09075 64.5725 2.67316 64.8029 3.3087C65.0332 3.94424 65.1332 4.61983 65.0968 5.29501V49.8707C65.1335 50.5328 65.0334 51.1952 64.8027 51.8167C64.572 52.4381 64.2157 53.0051 63.7562 53.4822C63.2719 53.9644 62.6952 54.3436 62.061 54.597C61.4267 54.8503 60.7478 54.9726 60.0652 54.9564H77.2143C76.548 54.9769 75.8845 54.8606 75.2648 54.6145C74.6451 54.3684 74.0822 53.9977 73.6108 53.5254C73.1394 53.053 72.7696 52.4889 72.524 51.8679C72.2784 51.2469 72.1622 50.5821 72.1828 49.9144V35.0674ZM175.904 43.5638C175.984 44.9098 175.778 46.2574 175.3 47.5178C174.822 48.7781 174.083 49.9226 173.131 50.8756C172.18 51.8286 171.037 52.5684 169.779 53.0463C168.52 53.5242 167.175 53.7292 165.832 53.6479H137.637V35.0674C136.833 35.1074 136.029 34.9782 135.278 34.6881C134.527 34.398 133.845 33.9534 133.276 33.3831C132.707 32.8128 132.263 32.1293 131.974 31.3767C131.684 30.6241 131.555 29.8191 131.595 29.0135V25.6463H157.441C158.787 25.5645 160.135 25.7704 161.396 26.2503C162.656 26.7303 163.801 27.4733 164.753 28.4301C165.706 29.387 166.444 30.5358 166.92 31.8004C167.396 33.065 167.598 34.4165 167.512 35.7653V14.5504C167.571 15.8947 167.356 17.2369 166.88 18.4952C166.404 19.7535 165.677 20.9015 164.744 21.8692C163.779 22.8046 162.633 23.5331 161.378 24.0101C160.122 24.487 158.782 24.7024 157.441 24.6431H131.595V17.9088C132.395 17.9339 133.193 17.7987 133.94 17.5111C134.687 17.2235 135.37 16.7893 135.948 16.2339C136.504 15.656 136.939 14.9723 137.228 14.2233C137.516 13.4742 137.652 12.6749 137.628 11.8723V1.26487H165.832C167.174 1.2056 168.514 1.42102 169.769 1.89796C171.025 2.37491 172.171 3.10337 173.136 4.03886C174.069 5.00329 174.795 6.14821 175.271 7.40361C175.747 8.65902 175.962 9.99852 175.904 11.3402V0.252976H125.554C126.228 0.215501 126.902 0.315214 127.537 0.546098C128.171 0.776983 128.752 1.13425 129.245 1.59635C129.704 2.09146 130.058 2.67419 130.287 3.3097C130.516 3.94521 130.614 4.62044 130.577 5.29501V49.8707C130.613 50.5328 130.513 51.1952 130.283 51.8167C130.052 52.4381 129.696 53.0051 129.236 53.4822C128.753 53.9638 128.178 54.3426 127.545 54.596C126.912 54.8493 126.235 54.9719 125.554 54.9564H175.904V43.5638Z" fill="#333333"/>
                  <path d="M5.5451 70.1872H3.06415V76.7645H2.55055V70.1872H0.0957031V69.6638H5.5451V70.1872ZM16.0348 76.7645H15.5038V73.2752H11.1512V76.7645H10.6202V69.6638H11.1338V72.7169H15.4863V69.6638H16.0174L16.0348 76.7645ZM26.7943 76.7645H21.6757V69.6638H26.6202V70.1872H22.1893V72.8041H26.3416V73.3275H22.1893V76.2498H26.7943V76.7645ZM46.9466 74.7756C46.9642 75.0558 46.9141 75.3362 46.8004 75.5928C46.6867 75.8495 46.5129 76.0749 46.2937 76.2498C45.7364 76.6292 45.0682 76.8104 44.396 76.7645H41.7845V69.6638H44.396C44.9707 69.6276 45.5425 69.7709 46.0326 70.0738C46.2292 70.2229 46.385 70.4195 46.4855 70.6453C46.5859 70.871 46.6278 71.1185 46.6071 71.3648C46.6061 71.5376 46.5886 71.71 46.5549 71.8795C46.5201 72.0509 46.4584 72.2158 46.3721 72.368C46.2831 72.5231 46.1648 72.6594 46.0239 72.7692C45.8492 72.9007 45.6466 72.9902 45.4319 73.0309C45.7116 73.0438 45.9851 73.1183 46.2328 73.249C46.4197 73.3503 46.5806 73.4936 46.7029 73.6677C46.8122 73.8309 46.8863 74.0151 46.9205 74.2086C46.946 74.3993 46.9548 74.592 46.9466 74.7843V74.7756ZM42.3155 76.2498H44.396C45.7366 76.2498 46.4069 75.7613 46.4069 74.7756C46.412 74.5501 46.3766 74.3256 46.3025 74.1126C46.2362 73.9265 46.1147 73.7652 45.9542 73.6503C45.7485 73.523 45.5214 73.4344 45.284 73.3886C44.9456 73.3231 44.6013 73.2938 44.2567 73.3013H42.3155V76.2498ZM42.3155 72.7605H44.2306C44.7149 72.7996 45.1997 72.6933 45.6235 72.4552C45.7797 72.3381 45.9034 72.1828 45.9827 72.0041C46.062 71.8254 46.0941 71.6293 46.0761 71.4346C46.09 71.2513 46.0592 71.0675 45.9864 70.8988C45.9136 70.7301 45.801 70.5817 45.6583 70.4663C45.2579 70.2248 44.7922 70.115 44.3264 70.1523H42.3155V72.7605ZM57.4537 76.7645H52.309V69.6638H57.2535V70.1872H52.8226V72.8041H56.9749V73.3275H52.8226V76.2498H57.4537V76.7645ZM65.4363 76.8953C65.0057 76.9133 64.5747 76.8693 64.1566 76.7645C63.8411 76.6768 63.5454 76.5287 63.2861 76.3283C63.0423 76.1541 62.8474 75.9197 62.7203 75.6479C62.5913 75.3738 62.5146 75.0779 62.494 74.7756H63.0163C63.0502 75.0614 63.1484 75.3358 63.3035 75.5781C63.4401 75.7848 63.6217 75.9578 63.8346 76.0841C64.0528 76.2113 64.2914 76.2998 64.5397 76.3458C64.8266 76.4001 65.1182 76.4264 65.4102 76.4243C65.7031 76.4274 65.9954 76.3951 66.2807 76.3283C66.5114 76.2688 66.7295 76.1684 66.9249 76.0317C67.0966 75.9131 67.237 75.7544 67.334 75.5694C67.4327 75.3843 67.4836 75.1774 67.482 74.9675C67.4883 74.7601 67.4466 74.5541 67.3601 74.3656C67.2609 74.1887 67.1167 74.0412 66.9423 73.9381C66.702 73.7978 66.4444 73.6893 66.1762 73.6154C65.8628 73.5194 65.4624 73.4235 65.001 73.3275C64.6594 73.2538 64.3246 73.1517 63.9999 73.0222C63.7527 72.9261 63.5209 72.7938 63.3122 72.6297C63.1407 72.4952 63.0034 72.3218 62.9118 72.1237C62.8202 71.9089 62.7756 71.6769 62.7812 71.4433C62.78 71.183 62.8396 70.9261 62.9553 70.6931C63.0706 70.4582 63.2408 70.2546 63.4515 70.0999C63.6802 69.9243 63.9402 69.794 64.2176 69.7161C64.5399 69.6219 64.8742 69.5749 65.21 69.5765C65.5452 69.5737 65.8792 69.6177 66.2023 69.7074C66.4841 69.7866 66.7515 69.9103 66.9945 70.0738C67.2198 70.2311 67.4092 70.4345 67.5503 70.6705C67.6913 70.9066 67.7808 71.17 67.8128 71.4433H67.3079C67.2607 71.251 67.1813 71.0681 67.0729 70.9025C66.9644 70.7355 66.8256 70.5905 66.6637 70.475C66.4752 70.3529 66.2699 70.2588 66.0544 70.1959C65.7926 70.1297 65.5234 70.0975 65.2535 70.0999C64.753 70.0651 64.2541 70.1871 63.8258 70.4489C63.671 70.5552 63.5453 70.6988 63.4601 70.8664C63.375 71.034 63.3331 71.2204 63.3384 71.4084C63.3364 71.5733 63.369 71.7367 63.4341 71.8882C63.4984 72.0395 63.604 72.1695 63.7388 72.2633C63.9089 72.392 64.1005 72.4895 64.3046 72.5512C64.5892 72.6516 64.88 72.7332 65.1751 72.7954L65.8106 72.9263C66.0282 72.9786 66.2459 73.0309 66.4548 73.1007C66.6513 73.1409 66.8436 73.1993 67.0293 73.2752C67.2125 73.3638 67.38 73.4817 67.5255 73.6241C67.6678 73.7661 67.7802 73.9352 67.8563 74.1213C67.9459 74.3398 67.9904 74.5743 67.9869 74.8105C67.9923 75.0983 67.9265 75.383 67.7954 75.6392C67.6688 75.8964 67.4876 76.1227 67.2644 76.3021C67.0223 76.4922 66.7481 76.637 66.4548 76.7296C66.1187 76.8454 65.7656 76.9044 65.4102 76.904L65.4363 76.8953ZM78.2154 70.1784H75.7344V76.7645H75.2121V70.1872H72.7399V69.6638H78.1893L78.2154 70.1784ZM98.4809 76.7645H97.8541L96.9836 74.479H93.5016C93.371 74.8454 93.2317 75.2205 93.0924 75.6217C92.9532 76.023 92.7965 76.4068 92.6572 76.7645H92.1088L92.7965 74.9675L93.4755 73.2228C93.7018 72.6471 93.9194 72.0627 94.1458 71.4782C94.3721 70.8937 94.6071 70.2918 94.8422 69.6812H95.5647L98.4809 76.7645ZM96.8269 74.069L95.1991 70.161L93.6496 74.069H96.8269ZM108.918 69.655L106.15 76.7645H105.471L102.72 69.6638H103.312L105.845 76.1277L108.361 69.6638L108.918 69.655ZM119.495 76.7645H118.868L117.998 74.479H114.516C114.385 74.8454 114.246 75.2205 114.098 75.6217C113.95 76.023 113.811 76.4068 113.671 76.7645H113.166C113.393 76.1538 113.628 75.5519 113.854 74.9675L114.533 73.2228L115.203 71.4782C115.43 70.8937 115.665 70.2918 115.891 69.6812H116.622L119.495 76.7645ZM117.841 74.069L116.213 70.161L114.664 74.069H117.841ZM125.145 76.7645H124.622V69.6638H125.145V76.7645ZM135.182 76.7645H131.003V69.6638H131.517V76.2585H135.182V76.7645ZM145.976 76.7645H145.375L144.505 74.479H141.023C140.892 74.8454 140.753 75.2205 140.605 75.6217C140.457 76.023 140.318 76.4068 140.178 76.7645H139.621C139.856 76.1538 140.083 75.5519 140.318 74.9675C140.553 74.383 140.762 73.7899 140.988 73.2228L141.667 71.4782L142.355 69.6812H143.086L145.976 76.7645ZM144.331 74.069L142.694 70.161L141.145 74.069H144.331ZM156.03 74.7756C156.048 75.0558 155.998 75.3362 155.884 75.5928C155.771 75.8495 155.597 76.0749 155.378 76.2498C154.819 76.6337 154.147 76.8152 153.471 76.7645H150.86V69.6638H153.428C154.002 69.6276 154.574 69.7709 155.064 70.0738C155.261 70.2229 155.417 70.4195 155.517 70.6453C155.617 70.871 155.659 71.1185 155.639 71.3648C155.638 71.5376 155.62 71.71 155.586 71.8795C155.551 72.0494 155.492 72.2138 155.412 72.368C155.32 72.5234 155.199 72.6596 155.055 72.7692C154.883 72.8992 154.684 72.9887 154.472 73.0309C154.749 73.0451 155.019 73.1195 155.264 73.249C155.451 73.3503 155.612 73.4936 155.734 73.6677C155.844 73.8309 155.918 74.0151 155.952 74.2086C155.995 74.3978 156.021 74.5905 156.03 74.7843V74.7756ZM151.399 76.2498H153.462C154.803 76.2498 155.473 75.7613 155.473 74.7756C155.478 74.5501 155.443 74.3256 155.369 74.1126C155.309 73.9233 155.186 73.7602 155.021 73.6503C154.817 73.5245 154.593 73.4359 154.359 73.3886C154.018 73.3231 153.671 73.2939 153.323 73.3013H151.399V76.2498ZM151.399 72.7605H153.314C153.799 72.7996 154.284 72.6933 154.707 72.4552C154.844 72.3286 154.954 72.1748 155.029 72.0037C155.104 71.8325 155.142 71.6476 155.142 71.4607C155.142 71.2739 155.104 71.089 155.029 70.9178C154.954 70.7467 154.844 70.5929 154.707 70.4663C154.307 70.2248 153.841 70.115 153.375 70.1523H151.364L151.399 72.7605ZM165.589 76.7645H161.41V69.6638H161.915V76.2585H165.58L165.589 76.7645ZM175.904 76.7645H170.786V69.6638H175.73V70.1872H171.299V72.8041H175.452V73.3275H171.299V76.2498H175.904V76.7645Z" fill="#333333" stroke="#333333" stroke-width="0.22" stroke-miterlimit="22.93"/>
                </g>
                <defs>
                  <clipPath id="clip0_69_9">
                    <rect width="176" height="77" fill="white"/>
                  </clipPath>
                </defs>
              </svg>
            </Link>}
            <div className={s.top__nav}>
              {(width === 'mobile' || width === 'tablet') && <div className={s.top__menu}>
                {!popupState ? <svg onClick={() => setPopupState(true)} width="24" height="24" viewBox="0 0 24 24" fill="none"
                      xmlns="http://www.w3.org/2000/svg">
                  <line x1="1" y1="17.5" x2="23" y2="17.5" stroke="black"/>
                  <line x1="1" y1="5.5" x2="23" y2="5.5" stroke="black"/>
                  <line x1="1" y1="11.5" x2="23" y2="11.5" stroke="black"/>
                </svg> :
                  <svg onClick={() => setPopupState(false)} width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M4.14648 20.2635L20.4099 4" stroke="black"/>
                    <path d="M4 4.14648L20.2635 20.4099" stroke="black"/>
                  </svg>
                }
                <Link className={s.top__logo__container + ` ${showSearch && s.top__logo__container__active}`} href={'/'}>
                  <svg className={s.top__logo} width="176" height="77" viewBox="0 0 176 77" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g clip-path="url(#clip0_69_9)">
                      <path fill-rule="evenodd" clip-rule="evenodd" d="M44.9096 47.594C44.1228 48.9293 43.0566 50.078 41.7845 50.9611C40.2204 52.0251 38.4906 52.8211 36.6659 53.3164C34.311 53.934 31.8832 54.2275 29.4494 54.1887C24.4091 54.1887 20.2132 53.1856 16.7747 51.0833C13.1254 48.8805 10.0024 45.9029 7.62563 42.36H0.0957031C1.81989 44.3779 3.70022 46.2563 5.71921 47.9778C7.60404 49.5888 9.69057 50.9466 11.926 52.0167C14.3814 53.1486 16.979 53.941 19.6474 54.3719C22.8835 54.9886 26.1729 55.2808 29.4668 55.2443C33.0994 55.2976 36.7272 54.9584 40.2872 54.2324C42.8917 53.7454 45.3922 52.8098 47.6779 51.4671C49.4114 50.4471 50.8558 48.9997 51.8737 47.2625C52.7887 45.616 53.2513 43.7557 53.2143 41.8715C53.2575 40.3858 53.005 38.9063 52.4714 37.5194C51.9378 36.1325 51.1339 34.866 50.1066 33.7938C47.7632 31.5273 45.0708 29.654 42.1327 28.2458C38.8088 26.6845 35.3895 25.3355 31.8955 24.207C28.2045 23.1195 24.766 21.9418 21.5799 20.6741C18.7975 19.69 16.1482 18.3626 13.6931 16.7224C11.5865 15.2918 10.4983 13.617 10.4983 11.4885C10.5327 10.0348 11.0333 8.6309 11.926 7.48454C12.9297 6.13564 14.1828 4.99254 15.6169 4.11737C17.3592 3.12963 19.2195 2.36752 21.1534 1.84933C23.2857 1.26167 25.4881 0.968193 27.6996 0.977005C31.3702 0.919755 34.9852 1.87973 38.1458 3.75099C41.2448 5.60032 43.9347 8.62728 46.285 12.8319H53.7976C50.6921 8.70547 46.6321 5.39743 41.9673 3.19271C36.9405 1.00732 31.5071 -0.0810255 26.0282 2.5332e-06C22.9809 -0.00728088 19.941 0.302602 16.9575 0.924665C14.4316 1.49754 12.0012 2.43178 9.74097 3.69865C7.8369 4.73444 6.17734 6.16838 4.87481 7.90325C3.7278 9.52365 3.11869 11.4646 3.13379 13.4512C3.06812 15.4086 3.71821 17.3226 4.96186 18.8335C6.31382 20.4534 7.96636 21.7954 9.82802 22.7851C12.0206 24.0375 14.326 25.0802 16.7138 25.8993C19.2295 26.824 21.8237 27.6439 24.5484 28.5163C27.2731 29.3886 29.8324 30.2609 32.4352 31.203C34.7501 32.05 37.0018 33.0616 39.173 34.23C41.0346 35.2197 42.6872 36.5616 44.0391 38.1816C45.2753 39.6636 45.9313 41.5456 45.8846 43.4766C45.8937 44.9107 45.5499 46.3248 44.8835 47.594M72.1828 35.0674C71.3922 35.093 70.6047 34.9568 69.8684 34.6674C69.132 34.3779 68.4622 33.9412 67.8998 33.3838C66.8116 32.2254 66.21 30.6917 66.2198 29.1007V25.6114H114.472V32.4243C113.676 32.3782 112.88 32.496 112.131 32.7706C111.382 33.0451 110.698 33.4706 110.12 34.0206C109.565 34.5997 109.131 35.2836 108.842 36.0323C108.554 36.7811 108.417 37.5799 108.44 38.3822V49.8707C108.473 50.5346 108.369 51.1982 108.133 51.8198C107.898 52.4413 107.537 53.0073 107.073 53.4822C106.591 53.9623 106.017 54.3403 105.386 54.5935C104.755 54.8468 104.079 54.9702 103.399 54.9564H120.514C119.847 54.9769 119.184 54.8606 118.564 54.6145C117.944 54.3684 117.381 53.9977 116.91 53.5254C116.439 53.053 116.069 52.4889 115.823 51.8679C115.578 51.2469 115.461 50.5821 115.482 49.9144V5.29501C115.46 4.61405 115.575 3.93565 115.821 3.30022C116.066 2.66479 116.436 2.08533 116.91 1.59635C117.386 1.13586 117.952 0.778848 118.572 0.547685C119.192 0.316522 119.853 0.21619 120.514 0.252976H103.399C104.07 0.218886 104.741 0.320234 105.372 0.551004C106.003 0.781775 106.582 1.13726 107.073 1.59635C107.533 2.09075 107.889 2.67316 108.12 3.3087C108.35 3.94424 108.45 4.61983 108.413 5.29501V15.3006C109.209 15.2627 110.004 15.3853 110.752 15.661C111.5 15.9367 112.185 16.3599 112.766 16.9056C113.328 17.4986 113.766 18.1987 114.053 18.9644C114.34 19.7302 114.471 20.5459 114.437 21.3632V24.6431H66.2198V17.996C67.0206 18.0205 67.8183 17.8842 68.5658 17.595C69.3133 17.3059 69.9955 16.8698 70.5723 16.3125C71.1147 15.7447 71.5358 15.072 71.8097 14.3356C72.0836 13.5991 72.2047 12.8143 72.1654 12.0293V5.29501C72.1435 4.61405 72.2586 3.93565 72.5039 3.30022C72.7491 2.66479 73.1195 2.08533 73.593 1.59635C74.0711 1.13364 74.6397 0.775338 75.2631 0.544108C75.8864 0.312878 76.5508 0.213745 77.2143 0.252976H60.0652C60.739 0.216511 61.4132 0.316695 62.0474 0.547527C62.6816 0.778359 63.2628 1.13509 63.7562 1.59635C64.2165 2.09075 64.5725 2.67316 64.8029 3.3087C65.0332 3.94424 65.1332 4.61983 65.0968 5.29501V49.8707C65.1335 50.5328 65.0334 51.1952 64.8027 51.8167C64.572 52.4381 64.2157 53.0051 63.7562 53.4822C63.2719 53.9644 62.6952 54.3436 62.061 54.597C61.4267 54.8503 60.7478 54.9726 60.0652 54.9564H77.2143C76.548 54.9769 75.8845 54.8606 75.2648 54.6145C74.6451 54.3684 74.0822 53.9977 73.6108 53.5254C73.1394 53.053 72.7696 52.4889 72.524 51.8679C72.2784 51.2469 72.1622 50.5821 72.1828 49.9144V35.0674ZM175.904 43.5638C175.984 44.9098 175.778 46.2574 175.3 47.5178C174.822 48.7781 174.083 49.9226 173.131 50.8756C172.18 51.8286 171.037 52.5684 169.779 53.0463C168.52 53.5242 167.175 53.7292 165.832 53.6479H137.637V35.0674C136.833 35.1074 136.029 34.9782 135.278 34.6881C134.527 34.398 133.845 33.9534 133.276 33.3831C132.707 32.8128 132.263 32.1293 131.974 31.3767C131.684 30.6241 131.555 29.8191 131.595 29.0135V25.6463H157.441C158.787 25.5645 160.135 25.7704 161.396 26.2503C162.656 26.7303 163.801 27.4733 164.753 28.4301C165.706 29.387 166.444 30.5358 166.92 31.8004C167.396 33.065 167.598 34.4165 167.512 35.7653V14.5504C167.571 15.8947 167.356 17.2369 166.88 18.4952C166.404 19.7535 165.677 20.9015 164.744 21.8692C163.779 22.8046 162.633 23.5331 161.378 24.0101C160.122 24.487 158.782 24.7024 157.441 24.6431H131.595V17.9088C132.395 17.9339 133.193 17.7987 133.94 17.5111C134.687 17.2235 135.37 16.7893 135.948 16.2339C136.504 15.656 136.939 14.9723 137.228 14.2233C137.516 13.4742 137.652 12.6749 137.628 11.8723V1.26487H165.832C167.174 1.2056 168.514 1.42102 169.769 1.89796C171.025 2.37491 172.171 3.10337 173.136 4.03886C174.069 5.00329 174.795 6.14821 175.271 7.40361C175.747 8.65902 175.962 9.99852 175.904 11.3402V0.252976H125.554C126.228 0.215501 126.902 0.315214 127.537 0.546098C128.171 0.776983 128.752 1.13425 129.245 1.59635C129.704 2.09146 130.058 2.67419 130.287 3.3097C130.516 3.94521 130.614 4.62044 130.577 5.29501V49.8707C130.613 50.5328 130.513 51.1952 130.283 51.8167C130.052 52.4381 129.696 53.0051 129.236 53.4822C128.753 53.9638 128.178 54.3426 127.545 54.596C126.912 54.8493 126.235 54.9719 125.554 54.9564H175.904V43.5638Z" fill="#333333"/>
                      <path d="M5.5451 70.1872H3.06415V76.7645H2.55055V70.1872H0.0957031V69.6638H5.5451V70.1872ZM16.0348 76.7645H15.5038V73.2752H11.1512V76.7645H10.6202V69.6638H11.1338V72.7169H15.4863V69.6638H16.0174L16.0348 76.7645ZM26.7943 76.7645H21.6757V69.6638H26.6202V70.1872H22.1893V72.8041H26.3416V73.3275H22.1893V76.2498H26.7943V76.7645ZM46.9466 74.7756C46.9642 75.0558 46.9141 75.3362 46.8004 75.5928C46.6867 75.8495 46.5129 76.0749 46.2937 76.2498C45.7364 76.6292 45.0682 76.8104 44.396 76.7645H41.7845V69.6638H44.396C44.9707 69.6276 45.5425 69.7709 46.0326 70.0738C46.2292 70.2229 46.385 70.4195 46.4855 70.6453C46.5859 70.871 46.6278 71.1185 46.6071 71.3648C46.6061 71.5376 46.5886 71.71 46.5549 71.8795C46.5201 72.0509 46.4584 72.2158 46.3721 72.368C46.2831 72.5231 46.1648 72.6594 46.0239 72.7692C45.8492 72.9007 45.6466 72.9902 45.4319 73.0309C45.7116 73.0438 45.9851 73.1183 46.2328 73.249C46.4197 73.3503 46.5806 73.4936 46.7029 73.6677C46.8122 73.8309 46.8863 74.0151 46.9205 74.2086C46.946 74.3993 46.9548 74.592 46.9466 74.7843V74.7756ZM42.3155 76.2498H44.396C45.7366 76.2498 46.4069 75.7613 46.4069 74.7756C46.412 74.5501 46.3766 74.3256 46.3025 74.1126C46.2362 73.9265 46.1147 73.7652 45.9542 73.6503C45.7485 73.523 45.5214 73.4344 45.284 73.3886C44.9456 73.3231 44.6013 73.2938 44.2567 73.3013H42.3155V76.2498ZM42.3155 72.7605H44.2306C44.7149 72.7996 45.1997 72.6933 45.6235 72.4552C45.7797 72.3381 45.9034 72.1828 45.9827 72.0041C46.062 71.8254 46.0941 71.6293 46.0761 71.4346C46.09 71.2513 46.0592 71.0675 45.9864 70.8988C45.9136 70.7301 45.801 70.5817 45.6583 70.4663C45.2579 70.2248 44.7922 70.115 44.3264 70.1523H42.3155V72.7605ZM57.4537 76.7645H52.309V69.6638H57.2535V70.1872H52.8226V72.8041H56.9749V73.3275H52.8226V76.2498H57.4537V76.7645ZM65.4363 76.8953C65.0057 76.9133 64.5747 76.8693 64.1566 76.7645C63.8411 76.6768 63.5454 76.5287 63.2861 76.3283C63.0423 76.1541 62.8474 75.9197 62.7203 75.6479C62.5913 75.3738 62.5146 75.0779 62.494 74.7756H63.0163C63.0502 75.0614 63.1484 75.3358 63.3035 75.5781C63.4401 75.7848 63.6217 75.9578 63.8346 76.0841C64.0528 76.2113 64.2914 76.2998 64.5397 76.3458C64.8266 76.4001 65.1182 76.4264 65.4102 76.4243C65.7031 76.4274 65.9954 76.3951 66.2807 76.3283C66.5114 76.2688 66.7295 76.1684 66.9249 76.0317C67.0966 75.9131 67.237 75.7544 67.334 75.5694C67.4327 75.3843 67.4836 75.1774 67.482 74.9675C67.4883 74.7601 67.4466 74.5541 67.3601 74.3656C67.2609 74.1887 67.1167 74.0412 66.9423 73.9381C66.702 73.7978 66.4444 73.6893 66.1762 73.6154C65.8628 73.5194 65.4624 73.4235 65.001 73.3275C64.6594 73.2538 64.3246 73.1517 63.9999 73.0222C63.7527 72.9261 63.5209 72.7938 63.3122 72.6297C63.1407 72.4952 63.0034 72.3218 62.9118 72.1237C62.8202 71.9089 62.7756 71.6769 62.7812 71.4433C62.78 71.183 62.8396 70.9261 62.9553 70.6931C63.0706 70.4582 63.2408 70.2546 63.4515 70.0999C63.6802 69.9243 63.9402 69.794 64.2176 69.7161C64.5399 69.6219 64.8742 69.5749 65.21 69.5765C65.5452 69.5737 65.8792 69.6177 66.2023 69.7074C66.4841 69.7866 66.7515 69.9103 66.9945 70.0738C67.2198 70.2311 67.4092 70.4345 67.5503 70.6705C67.6913 70.9066 67.7808 71.17 67.8128 71.4433H67.3079C67.2607 71.251 67.1813 71.0681 67.0729 70.9025C66.9644 70.7355 66.8256 70.5905 66.6637 70.475C66.4752 70.3529 66.2699 70.2588 66.0544 70.1959C65.7926 70.1297 65.5234 70.0975 65.2535 70.0999C64.753 70.0651 64.2541 70.1871 63.8258 70.4489C63.671 70.5552 63.5453 70.6988 63.4601 70.8664C63.375 71.034 63.3331 71.2204 63.3384 71.4084C63.3364 71.5733 63.369 71.7367 63.4341 71.8882C63.4984 72.0395 63.604 72.1695 63.7388 72.2633C63.9089 72.392 64.1005 72.4895 64.3046 72.5512C64.5892 72.6516 64.88 72.7332 65.1751 72.7954L65.8106 72.9263C66.0282 72.9786 66.2459 73.0309 66.4548 73.1007C66.6513 73.1409 66.8436 73.1993 67.0293 73.2752C67.2125 73.3638 67.38 73.4817 67.5255 73.6241C67.6678 73.7661 67.7802 73.9352 67.8563 74.1213C67.9459 74.3398 67.9904 74.5743 67.9869 74.8105C67.9923 75.0983 67.9265 75.383 67.7954 75.6392C67.6688 75.8964 67.4876 76.1227 67.2644 76.3021C67.0223 76.4922 66.7481 76.637 66.4548 76.7296C66.1187 76.8454 65.7656 76.9044 65.4102 76.904L65.4363 76.8953ZM78.2154 70.1784H75.7344V76.7645H75.2121V70.1872H72.7399V69.6638H78.1893L78.2154 70.1784ZM98.4809 76.7645H97.8541L96.9836 74.479H93.5016C93.371 74.8454 93.2317 75.2205 93.0924 75.6217C92.9532 76.023 92.7965 76.4068 92.6572 76.7645H92.1088L92.7965 74.9675L93.4755 73.2228C93.7018 72.6471 93.9194 72.0627 94.1458 71.4782C94.3721 70.8937 94.6071 70.2918 94.8422 69.6812H95.5647L98.4809 76.7645ZM96.8269 74.069L95.1991 70.161L93.6496 74.069H96.8269ZM108.918 69.655L106.15 76.7645H105.471L102.72 69.6638H103.312L105.845 76.1277L108.361 69.6638L108.918 69.655ZM119.495 76.7645H118.868L117.998 74.479H114.516C114.385 74.8454 114.246 75.2205 114.098 75.6217C113.95 76.023 113.811 76.4068 113.671 76.7645H113.166C113.393 76.1538 113.628 75.5519 113.854 74.9675L114.533 73.2228L115.203 71.4782C115.43 70.8937 115.665 70.2918 115.891 69.6812H116.622L119.495 76.7645ZM117.841 74.069L116.213 70.161L114.664 74.069H117.841ZM125.145 76.7645H124.622V69.6638H125.145V76.7645ZM135.182 76.7645H131.003V69.6638H131.517V76.2585H135.182V76.7645ZM145.976 76.7645H145.375L144.505 74.479H141.023C140.892 74.8454 140.753 75.2205 140.605 75.6217C140.457 76.023 140.318 76.4068 140.178 76.7645H139.621C139.856 76.1538 140.083 75.5519 140.318 74.9675C140.553 74.383 140.762 73.7899 140.988 73.2228L141.667 71.4782L142.355 69.6812H143.086L145.976 76.7645ZM144.331 74.069L142.694 70.161L141.145 74.069H144.331ZM156.03 74.7756C156.048 75.0558 155.998 75.3362 155.884 75.5928C155.771 75.8495 155.597 76.0749 155.378 76.2498C154.819 76.6337 154.147 76.8152 153.471 76.7645H150.86V69.6638H153.428C154.002 69.6276 154.574 69.7709 155.064 70.0738C155.261 70.2229 155.417 70.4195 155.517 70.6453C155.617 70.871 155.659 71.1185 155.639 71.3648C155.638 71.5376 155.62 71.71 155.586 71.8795C155.551 72.0494 155.492 72.2138 155.412 72.368C155.32 72.5234 155.199 72.6596 155.055 72.7692C154.883 72.8992 154.684 72.9887 154.472 73.0309C154.749 73.0451 155.019 73.1195 155.264 73.249C155.451 73.3503 155.612 73.4936 155.734 73.6677C155.844 73.8309 155.918 74.0151 155.952 74.2086C155.995 74.3978 156.021 74.5905 156.03 74.7843V74.7756ZM151.399 76.2498H153.462C154.803 76.2498 155.473 75.7613 155.473 74.7756C155.478 74.5501 155.443 74.3256 155.369 74.1126C155.309 73.9233 155.186 73.7602 155.021 73.6503C154.817 73.5245 154.593 73.4359 154.359 73.3886C154.018 73.3231 153.671 73.2939 153.323 73.3013H151.399V76.2498ZM151.399 72.7605H153.314C153.799 72.7996 154.284 72.6933 154.707 72.4552C154.844 72.3286 154.954 72.1748 155.029 72.0037C155.104 71.8325 155.142 71.6476 155.142 71.4607C155.142 71.2739 155.104 71.089 155.029 70.9178C154.954 70.7467 154.844 70.5929 154.707 70.4663C154.307 70.2248 153.841 70.115 153.375 70.1523H151.364L151.399 72.7605ZM165.589 76.7645H161.41V69.6638H161.915V76.2585H165.58L165.589 76.7645ZM175.904 76.7645H170.786V69.6638H175.73V70.1872H171.299V72.8041H175.452V73.3275H171.299V76.2498H175.904V76.7645Z" fill="#333333" stroke="#333333" stroke-width="0.22" stroke-miterlimit="22.93"/>
                    </g>
                    <defs>
                      <clipPath id="clip0_69_9">
                        <rect width="176" height="77" fill="white"/>
                      </clipPath>
                    </defs>
                  </svg>
                </Link>
              </div>}
              {(width !== 'mobile' && width !== 'tablet') && <Dropdown className={s.dropdown}
                         handler={(e: MouseEvent, value: string) => onToggleLanguageClick(e, router, value)}
                         value={router.locale || 'ru'}
                         options={router.locales || []}
                         name={'lang'} />}
              <div className={s.top__btns}>
                <div className={`${s.top__btns__btn} ${s.top__btns__btn__search}`}>
                  <div className={s.top__btns__btn__container}>
                    <div
                      className={s.top__btns__btn__container__results}
                      ref={ref}>
                      <input
                        onChange={(e)=>handleSearchInput(e)}
                        onKeyUp={(e)=>{
                          clearTimeout(typingTimer);
                          typingTimer = setTimeout(doneTyping, doneTypingInterval);
                        }}
                        onKeyDown={(e)=>{
                          clearTimeout(typingTimer);
                        }}
                        className={!showSearch ? s.top__btns__btn__search__unactive : s.top__btns__btn__search__active}
                        placeholder={t('header.search')} type="text" value={searchValue}
                      />
                      {
                        showSearch && isLoading
                          ? <div className={s.top__btns__btn__results}>
                            <div className={s.top__btns__btn__results__notfound}>
                              {locale === 'ru' ? 'Загрузка...' : 'Loading...'}
                            </div>
                          </div>
                          : showSearch && products && (products.length > 0 ? <div className={s.top__btns__btn__results}>
                          {products.map((el, index)=>{
                            if(index === products.length-1){
                              return (
                                <Link href={`/product/${el.id}`} className={s.top__btns__btn__results__result}>
                                  {el.name}
                                </Link>
                              )
                            }
                            return (
                              <>
                                <Link href={`/product/${el.id}`}  className={s.top__btns__btn__results__result}>
                                  {el.name}
                                </Link>
                                <p className={'line'} />
                              </>
                            )
                          })}
                        </div> : <div className={s.top__btns__btn__results}>
                          <div className={s.top__btns__btn__results__notfound}>
                            {locale === 'ru' ? 'Ничего не найдено' : 'Nothing is found'}
                          </div>
                        </div>
                        )
                      }
                    </div>
                  </div>
                  <svg className={'searchbtn'} onClick={(e: MouseEvent)=>{
                    handleSearchClick(e)
                  }} width="21" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 20L15.514 15.506M18 9.5C18 11.7543 17.1045 13.9163 15.5104 15.5104C13.9163 17.1045 11.7543 18 9.5 18C7.24566 18 5.08365 17.1045 3.48959 15.5104C1.89553 13.9163 1 11.7543 1 9.5C1 7.24566 1.89553 5.08365 3.48959 3.48959C5.08365 1.89553 7.24566 1 9.5 1C11.7543 1 13.9163 1.89553 15.5104 3.48959C17.1045 5.08365 18 7.24566 18 9.5V9.5Z" stroke="#A0A0A0" strokeLinecap="round"/>
                  </svg>
                </div>
                {(width !== 'mobile' && width !== 'tablet') && <Link prefetch={false} href="/favorites" className={s.top__btns__btn}>
                  <svg width="24" height="21" viewBox="0 0 24 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M21.1721 11.1855L12.0102 20L2.84826 11.1855M2.84826 11.1855C2.24395 10.6143 1.76794 9.9277 1.45021 9.16898C1.13248 8.41026 0.979915 7.59585 1.00212 6.77704C1.02432 5.95822 1.22081 5.15275 1.57922 4.41133C1.93763 3.66991 2.45019 3.0086 3.08462 2.46906C3.71905 1.92952 4.46162 1.52343 5.26555 1.27636C6.06949 1.02929 6.91738 0.94659 7.75583 1.03347C8.59429 1.12036 9.40514 1.37494 10.1373 1.78119C10.8695 2.18744 11.5072 2.73656 12.0102 3.39396C12.5153 2.74133 13.1538 2.19701 13.8854 1.79507C14.6171 1.39313 15.4263 1.14223 16.2624 1.05806C17.0985 0.973891 17.9435 1.05827 18.7445 1.30592C19.5455 1.55357 20.2853 1.95915 20.9175 2.49729C21.5497 3.03542 22.0607 3.69453 22.4186 4.43335C22.7766 5.17217 22.9736 5.9748 22.9975 6.79101C23.0214 7.60722 22.8716 8.41944 22.5575 9.17683C22.2434 9.93422 21.7718 10.6205 21.1721 11.1927"
                      stroke="#A0A0A0" strokeLinecap='round' strokeLinejoin="round"/>
                  </svg>
                  {fav.products.length > 0 && <div
                    className={s.top__btns__btn__count}>{fav.products.length > 9 ? '9+' : fav.products.length}</div>}
                </Link>}
                {<Link prefetch={false} href="/basket" className={s.top__btns__btn}>
                  <svg width="18" height="24" viewBox="0 0 18 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M5 9V5C5 2.79 6.795 1 9 1C11.21 1 13 2.795 13 5V9M1 7H17V23H1V7Z" stroke="#A0A0A0"
                          strokeLinecap="round"/>
                  </svg>
                  {basket.products.length > 0 &&
                    <div className={s.top__btns__btn__count}>{basketCount > 9 ? '9+' : basketCount}</div>}
                </Link>}
                {isAuth
                  ? <Link href="/profile" className={s.top__btns__btn + ' ' + s.top__btns__image}>
                      <img src={user?.user_image ? (typeof user.user_image !== 'string' ? URL.createObjectURL(user.user_image) : `${API_BASE_URL}${user?.user_image}`) : ProfileImg.src} alt='user'/>
                    </Link>
                  : <div onClick={()=>dispatch(toggleShowAuth(true))} className={s.top__btns__auth}>
                    <svg width="500" height="500" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <g clipPath="url(#clip0_413_3)">
                        <circle cx="250.5" cy="182.5" r="88.5" stroke="black" strokeWidth="16"/>
                        <path d="M465 442C465 468.607 443.577 494.776 404.209 514.77C365.284 534.539 310.952 547 250.5 547C190.048 547 135.716 534.539 96.7913 514.77C57.4228 494.776 36 468.607 36 442C36 415.393 57.4228 389.224 96.7913 369.23C135.716 349.461 190.048 337 250.5 337C310.952 337 365.284 349.461 404.209 369.23C443.577 389.224 465 415.393 465 442Z" stroke="black" strokeWidth="16"/>
                      </g>
                      <defs>
                        <clipPath id="clip0_413_3">
                          <rect width="500" height="500" fill="white"/>
                        </clipPath>
                      </defs>
                    </svg>
                  </div>
                }
              </div>
            </div>
          </div>
          <div className={s.bottom}>
            <div className={s.bottom__btns}>
              <div className={s.bottom__btns__btn}>
                <Link href="/" locale={router.locale}>{t('header.home')}</Link>
              </div>
              <div className={s.bottom__btns__btn}>
                {popupState
                  ? <Link
                    onClick={() => {
                      setPopupState(false)
                    }}
                    href="/catalog"
                    locale={router.locale}>{t('header.catalogue')}</Link>
                  : <a style={{cursor: 'pointer'}} onClick={() => setPopupState(true)}>{t('header.catalogue')}</a>}
              </div>
              <div className={s.bottom__btns__btn}>
                <Link href="/coop" locale={router.locale}>{t('header.coop')}</Link>
              </div>
              <div className={s.bottom__btns__btn}>
                <Link href="/about" locale={router.locale}>{t('header.about')}</Link>
              </div>
              <div className={s.bottom__btns__btn}>
                <Link href="/contacts" locale={router.locale}>{t('header.contacts')}</Link>
              </div>
            </div>
          </div>
          <div className={popupState ? s.popup_active : s.popup} onMouseOver={()=>(width !== 'mobile' && width !== 'tablet') ? setPopupState(true) : ''} onMouseLeave={()=>(width !== 'mobile' && width !== 'tablet') ? setPopupState(false) : ''}>
            <div className={s.popup_active__container__flex}>
              <div className={s.popup_active__container}>
                {(width === 'mobile' || width === 'tablet') ? (<>
                  <ul className={s.popup_active__list}>
                    <div className={s.popup_active__list__main}>
                      <Link style={{width: '200px'}} href="/" locale={router.locale}>{t('header.home')}</Link>
                      <Dropdown className={s.dropdown}
                                handler={(e: MouseEvent, value: string)=>onToggleLanguageClick(e, router, value)}
                                value={router.locale || 'ru'}
                                options={router.locales || []}
                                name={'lang'} />
                    </div>
                    <div className={s.popup_active__list__catalog}>{
                      catalogState ? <Link
                          onClick={() => {
                            setCatalogState(false)
                            setPopupState(false)
                          }}
                          href="/catalog"
                          locale={router.locale}>{t('header.catalogue')}</Link>
                        : <a style={{cursor: 'pointer'}} onClick={() => setCatalogState(true)}>{t('header.catalogue')}</a>}
                      <svg className={s.popup_active__list__catalog__svg} onClick={() => setCatalogState(prev => !prev)} style={{transform: catalogState ? 'rotate(180deg)' : 'rotate(0deg)'}} width="16" height="8" viewBox="0 0 16 8" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M15.6834 1.58525L8.59103 7.79723C8.5066 7.87097 8.41513 7.92307 8.31662 7.95355C8.21812 7.98452 8.11258 8 8 8C7.88742 8 7.78188 7.98452 7.68338 7.95355C7.58487 7.92307 7.4934 7.87097 7.40897 7.79723L0.295514 1.58525C0.0985045 1.41321 -2.97318e-07 1.19816 -3.08598e-07 0.940093C-3.19879e-07 0.682028 0.105541 0.46083 0.316622 0.276498C0.527704 0.0921664 0.773966 9.19843e-07 1.05541 9.07541e-07C1.33685 8.95239e-07 1.58311 0.0921664 1.79419 0.276498L8 5.69585L14.2058 0.276498C14.4028 0.104455 14.6454 0.0184329 14.9336 0.0184329C15.2224 0.0184329 15.4723 0.110599 15.6834 0.294931C15.8945 0.479263 16 0.694316 16 0.940092C16 1.18587 15.8945 1.40092 15.6834 1.58525Z" fill="#A0A0A0"/>
                      </svg>
                    </div>
                    <div className={s.popup_active__list__catalog__container + ' ' + (catalogState && s.popup_active__list__catalog__container__active)}>
                      <div className={s.popup_active__list__catalog__list + ' ' + (catalogState && s.popup_active__list__catalog__active)}>
                        {headerState.length > 0 && headerState.map((el, index) => {
                          return <Dropdown handler={() => {
                            setCatalogState(false)
                            setPopupState(false)
                          }} type={'header'} name={el.name} value={el.name} options={el.collection} />
                        })}
                      </div>
                    </div>
                    <Link href="/favorites" locale={router.locale}>{locale === 'ru' ? 'Избранное' : 'Favorites'}</Link>
                    <Link href="/coop" locale={router.locale}>{t('header.coop')}</Link>
                    <Link href="/about" locale={router.locale}>{t('header.about')}</Link>
                    <Link href="/contacts" locale={router.locale}>{t('header.contacts')}</Link>
                  </ul>
                </>) : (<><ul className={s.popup_active__list}>
                  {headerState.length > 0 && headerState.map((el, index) => {
                    return <li key={index}
                               className={popupPage == 0 ? s.popup_active__list__link : s.popup_active__list__linkDisabel}
                               onClick={() => setPopupState(false)} onMouseOver={() => setPopupArr(el.collection)}>
                      <Link
                        href={`/catalog?category=${el.id}`}>{el.name}</Link>
                      {el.collection.length > 0 &&
                        <svg width="6" height="12" viewBox="0 0 6 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path
                            d="M1.39001 0.877758L5.53133 5.60599C5.58048 5.66228 5.61522 5.72326 5.63554 5.78893C5.65618 5.8546 5.6665 5.92496 5.6665 6.00001C5.6665 6.07506 5.65618 6.14542 5.63554 6.21109C5.61522 6.27676 5.58048 6.33774 5.53133 6.39403L1.39001 11.1363C1.27531 11.2677 1.13194 11.3333 0.959899 11.3333C0.787856 11.3333 0.64039 11.263 0.517503 11.1223C0.394615 10.9815 0.333171 10.8174 0.333171 10.6297C0.333171 10.4421 0.394615 10.2779 0.517503 10.1372L4.13041 6.00001L0.517502 1.86281C0.402806 1.73147 0.345459 1.56973 0.345459 1.3776C0.345459 1.18509 0.406902 1.01848 0.52979 0.877758C0.652678 0.737037 0.796047 0.666676 0.959898 0.666676C1.12375 0.666676 1.26712 0.737037 1.39001 0.877758Z"
                            fill="black"/>
                        </svg>}
                    </li>
                  })}
                </ul>
                  <ul onMouseLeave={()=>setPopupArr([])} className={popupArr.length > 0 ? s.popup_active__semilist_active :  s.popup_active__semilist}>
                    {popupArr.map((el, index)=>{
                      return <li key={index} onClick={()=>setPopupState(false)}>
                        <Link href={`/catalog?collection=${el.master_id}`}>{el.name}</Link>
                      </li>
                    })}
                  </ul></>)}
              </div>
              {width !== 'mobile' && width !== 'tablet' && dayProduct && <div className={s.popup_active__day}>
                <div className={s.popup_active__day__container}>
                  <h2>{locale === 'ru' ? 'Товар дня' : 'Product of the Day'}</h2>
                  <div className={s.popup_active__day__container__card}>
                    <Card day={true} className={'day'} product={dayProduct}/>
                  </div>
                </div>
              </div>}
            </div>
          </div>
        </div>
      </header>
    </>
  )
}

export default Header